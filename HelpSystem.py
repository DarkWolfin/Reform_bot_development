import asyncio
import os
import sqlite3

from aiogram import Bot, types, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, InputFile, ReplyKeyboardRemove
from aiogram.utils import executor
from aiogram.utils.exceptions import BotBlocked

from Token import Token
bot = Bot(Token)
dp = Dispatcher(bot, storage=MemoryStorage())

import Markups
import FSM_classes
from Database import help_system_good, help_system_norm, help_system_bad, help_system_agreement


async def choose_helpsystem(message: types.Message, state: FSMContext):
    if message.text == '–•–æ—Ä–æ—à–æ üòÄ':
        await help_system_good(user_id=message.from_user.id)
        await bot.send_message(message.from_user.id, '–≠—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! (–ß—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–º + –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞)', reply_markup=ReplyKeyboardRemove())
        await bot.send_message(message.from_user.id,'–ñ–µ–ª–∞–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (–∑–∞–ø—É—Å–∫ –Ω–∞ 1 –Ω–µ–¥–µ–ª–µ –¥–ª—è –≤—Å–µ—Ö)?', reply_markup=Markups.try_practice_good)
        await state.set_state(FSM_classes.HelpSystem.good_condition)
    elif message.text == '–ù–æ—Ä–º–∞–ª—å–Ω–æ üôÇ':
        await help_system_norm(user_id=message.from_user.id)
        await bot.send_message(message.from_user.id, '–í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—â–µ –ª—É—á—à–µ?')
        await state.set_state(FSM_classes.HelpSystem.norm_condition)
    elif message.text == '–ü–ª–æ—Ö–æ üò¢':
        await help_system_bad(user_id=message.from_user.id)
        await bot.send_message(message.from_user.id, '')
        await state.set_state(FSM_classes.HelpSystem.bad_condition)


async def try_practice(callback_query: types.CallbackQuery, state: FSMContext):
    db_helpsys = sqlite3.connect('Databases/Help_system.db')
    cur_helpsys = db_helpsys.cursor()
    if callback_query.data[-1] == 'y':
        if callback_query.data[-2] == 'g':
            cur_helpsys.execute("UPDATE good SET try_practice = ? WHERE user_id = ?", ('–î–∞', callback_query.from_user.id))
        elif callback_query.data[-2] == 'n':
            cur_helpsys.execute("UPDATE norm SET try_practice = ? WHERE user_id = ?", ('–î–∞', callback_query.from_user.id))
        else:
            cur_helpsys.execute("UPDATE bad SET try_practice = ? WHERE user_id = ?", ('–î–∞', callback_query.from_user.id))
        db_helpsys.commit()

        await bot.send_message(callback_query.from_user.id, '–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"')
    else:
        if callback_query.data[-2] == 'g':
            cur_helpsys.execute("UPDATE good SET try_practice = ? WHERE user_id = ?", ('–ù–µ—Ç', callback_query.from_user.id))
            await bot.send_message(callback_query.from_user.id,
                                   '–ß—Ç–æ–±—ã –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤—Å–µ–≥–¥–∞ –≤ –Ω–æ—Ä–º–µ, —Ö–æ—Ç–∏–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –≤ —Å–µ–±–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏, –∞ —Ç–∞–∫–∂–µ –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ. '
                                   '\n–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?', reply_markup=InlineKeyboardMarkup(row_width=1).add(
                    InlineKeyboardButton('–î–∞, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', callback_data='agreement_mailing_help_gy'),
                    InlineKeyboardButton('–ù–µ—Ç, –Ω–µ —Ö–æ—á—É', callback_data='agreement_mailing_help_gn')))
        elif callback_query.data[-2] == 'n':
            cur_helpsys.execute("UPDATE norm SET try_practice = ? WHERE user_id = ?", ('–ù–µ—Ç', callback_query.from_user.id))
            await bot.send_message(callback_query.from_user.id,
                                   '–ß—Ç–æ–±—ã –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤—Å–µ–≥–¥–∞ –≤ –Ω–æ—Ä–º–µ, —Ö–æ—Ç–∏–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –≤ —Å–µ–±–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏, –∞ —Ç–∞–∫–∂–µ –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ. '
                                   '\n–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?', reply_markup=InlineKeyboardMarkup(row_width=1).add(
                    InlineKeyboardButton('–î–∞, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', callback_data='agreement_mailing_help_ny'),
                    InlineKeyboardButton('–ù–µ—Ç, –Ω–µ —Ö–æ—á—É', callback_data='agreement_mailing_help_nn')))
        else:
            cur_helpsys.execute("UPDATE bad SET try_practice = ? WHERE user_id = ?", ('–ù–µ—Ç', callback_query.from_user.id))
            await bot.send_message(callback_query.from_user.id,
                                   '–ß—Ç–æ–±—ã –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤—Å–µ–≥–¥–∞ –≤ –Ω–æ—Ä–º–µ, —Ö–æ—Ç–∏–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –≤ —Å–µ–±–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏, –∞ —Ç–∞–∫–∂–µ –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ. '
                                   '\n–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?', reply_markup=InlineKeyboardMarkup(row_width=1).add(
                    InlineKeyboardButton('–î–∞, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', callback_data='agreement_mailing_help_by'),
                    InlineKeyboardButton('–ù–µ—Ç, –Ω–µ —Ö–æ—á—É', callback_data='agreement_mailing_help_bn')))
        db_helpsys.commit()


async def agreement_mailing_help(callback_query: types.CallbackQuery, state: FSMContext):
    await help_system_agreement(user_id=callback_query.from_user.id)
    db_helpsys = sqlite3.connect('Databases/Help_system.db')
    cur_helpsys = db_helpsys.cursor()
    if callback_query.data[-2] == 'g':
        cur_helpsys.execute("UPDATE agreement SET state = ? WHERE user_id = ?", ('–•–æ—Ä–æ—à–æ', callback_query.from_user.id))
    elif callback_query.data[-2] == 'n':
        cur_helpsys.execute("UPDATE agreement SET state = ? WHERE user_id = ?",('–ù–æ—Ä–º–∞–ª—å–Ω–æ', callback_query.from_user.id))
    else:
        cur_helpsys.execute("UPDATE agreement SET state = ? WHERE user_id = ?", ('–ü–ª–æ—Ö–æ', callback_query.from_user.id))
    db_helpsys.commit()
    if callback_query.data[-1] == 'y':
        cur_helpsys.execute("UPDATE agreement SET choice = ? WHERE user_id = ?", ('–î–∞', callback_query.from_user.id))
        await bot.send_message(callback_query.from_user.id, '–ó–∞–±–æ—Ç–∞ –æ —Å–≤–æ—ë–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ - —ç—Ç–æ –≤–∞–∂–Ω–æ! –í—ã –¥–µ–ª–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä!'
                                                            '\n–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –≤–µ—á–µ—Ä–∞!')
    else:
        cur_helpsys.execute("UPDATE agreement SET choice = ? WHERE user_id = ?", ('–ù–µ—Ç', callback_query.from_user.id))
        await bot.send_message(callback_query.from_user.id,
                               '–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤–∞–º –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ —Ç–µ–º–∞ –∑–∞–±–æ—Ç—ã –æ —Å–≤–æ—ë–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ(('
                               '\n–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –≤–µ—á–µ—Ä–∞!')
    db_helpsys.commit()
    await state.set_state(FSM_classes.MultiDialog.menu)


def register_handlers_helpsystem(dp: Dispatcher):
    dp.register_callback_query_handler(try_practice, text=['try_practice_gy', 'try_practice_ny', 'try_practice_by', 'try_practice_gn', 'try_practice_nn', 'try_practice_bn'])
    dp.register_callback_query_handler(agreement_mailing_help, text=['agreement_mailing_help_gy', 'agreement_mailing_help_ny', 'agreement_mailing_help_by', 'agreement_mailing_help_gn', 'agreement_mailing_help_nn', 'agreement_mailing_help_bn'])

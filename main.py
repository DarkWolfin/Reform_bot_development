import os
import chats_id
from PsyTests import Psy_Weariness, Psy_selfefficacy
from AllCourses import Anxiety
from Habits import Sleep, Water, Reading, Body
from PopTests import Pop_Control, Pop_Typeperson
from PsyTests import Psy_Weariness, Psy_selfefficacy, Psy_stress
import Specialists
import Habit
import Tests
import Courses
import Practices
import Markups
import FSM_classes
import asyncio
import sqlite3
from datetime import datetime, timedelta
import admin_commands
import quick_help
import Specialists

from aiogram import Bot, types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aioschedule as schedule

from aiogram.utils.exceptions import BotBlocked, BotKicked

from Token import Token
from Database import db_start, data_profile, affirmation, data_feedback, pre_points_test_weariness, \
    points_test_weariness, \
    pre_answers_test_weariness, set_user_token, get_all_user_ids, save_user_action, data_FB_marathon, NEW_affirmation


async def on_startup(_):
    await db_start()


bot = Bot(Token)
dp = Dispatcher(bot, storage=MemoryStorage())


Specialists.register_handlers_specialist(dp)
quick_help.register_handlers_quick_help(dp)
Pop_Control.register_handlers_Pop_Control(dp)
Pop_Typeperson.register_handlers_Pop_typeperson(dp)

Psy_selfefficacy.register_handlers_Psy_selfefficacy(dp)
Psy_stress.register_handlers_Psy_stress(dp)
Psy_Weariness.register_handlers_Psy_Weariness(dp)


Token_Raiff = ['RCS1', 'RCS2', 'RCS3', 'RCS4', 'RCS5', 'RCS6', 'RCS7', 'RCS8', 'RCS9', 'RCS10', 'RCS11', 'RCS12', 'RCS13',
               'RCS14', 'RCS15', 'RCS16', 'RCS17', 'RCS18', 'RCS19', 'RCS20', 'RCS21', 'RCS22', 'RCS23', 'RCS24', 'RCS25', 'RCS26',
               'SME1', 'SME2', 'SME3', 'SME4', 'SME5', 'SME6', 'SME7', 'SME8', 'SME9', 'SME10', 'SME11', 'SME12', 'SME13', 'SME14', 'SME15',
               'PREM1', 'PREM2', 'PREM3', 'PREM4', 'PREM5', 'PREM6', 'PREM7', 'PREM8', 'PREM9',
               'TEST1', 'TEST2', 'TEST3', 'TEST4', 'TEST5', 'TEST00', 'TEST000',
               'admin']


@dp.message_handler(commands=['start'], state='*')
async def welcome(message: types.Message):
    await data_profile(user_id=message.from_user.id, first_name=message.from_user.first_name,
                       username=message.from_user.username)
    await FSM_classes.MultiDialog.getToken.set()
    mess = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üñê, <b>{message.from_user.first_name}</b>! –†–∞–¥, —á—Ç–æ –≤—ã –∑–∞–±–æ—Ç–∏—Ç–µ—Ç—Å—å –æ —Å–≤–æ–µ–º –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –∑–¥–æ—Ä–æ–≤—å–µ! ' \
           f'\n–ë–æ—Ç Reform - —ç—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞, —Ç—Ä–µ–≤–æ–≥–∏ –∏–ª–∏ –∞–ø–∞—Ç–∏–∏, –∞ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ–≥–æ!' \
           f'\n\n–û–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –µ—ë —Ä–µ—à–µ–Ω–∏—è.' \
           f'\n–í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ª—é–±—ã–µ –ø—Ä–µ–≥—Ä–∞–¥—ã –Ω–∞ –≤–∞—à–µ–º –ø—É—Ç–∏, –∞ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–≤–µ—Ç–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É!'
    await bot.send_message(message.from_user.id, mess, parse_mode='html')
    await bot.send_message(message.from_user.id,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–∏—á–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞, –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–π –≤–∞–º \n–ù–∞—à –±–æ—Ç –Ω–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ",
                           parse_mode='html')
    await FSM_classes.MultiDialog.setToken.set()

    await log_users(message)
    await save_user_action(user_id=message.from_user.id, action='/start')


@dp.message_handler(commands=['main_menu'], state='*')
async def main_menu(message: types.Message, state: FSMContext):
    await FSM_classes.HabitSleep.none.set()
    await FSM_classes.MultiDialog.menu.set()
    await bot.send_message(message.from_user.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é! –ù–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?'
                                                 '\n\nüßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç—è–∂—ë–ª–æ–≥–æ –¥–Ω—è –∏–ª–∏ —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è'
                                                 '\nüìù –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É'
                                                 '\nüí™ –¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–º–æ–∂–µ—Ç –≤–Ω–µ–¥—Ä–∏—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–≤—ã–∫–∏'
                                                 '\nüé¨ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –∫—É—Ä—Å—ã, —É–∑–Ω–∞–≤–∞–π—Ç–µ –ª—É—á—à–µ —Å–µ–±—è, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏'
                                                 '\nüí¨ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'
                                                 '\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
                           parse_mode='html', reply_markup=Markups.main_kb)
    await log_users(message)
    await save_user_action(user_id=message.from_user.id, action='/main_menu')


@dp.message_handler(state=FSM_classes.MultiDialog.setToken)
async def set_token(message: types.Message):
    Welcome_kb = InlineKeyboardMarkup()
    Welcome_kb.add(InlineKeyboardButton(
        '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!', callback_data='Welcome_btn0'))
    if message.text in Token_Raiff:
        try:
            await set_user_token(user_id=message.from_user.id, token=message.text)
            await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ! –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!", parse_mode='html',
                                   reply_markup=Welcome_kb)
            await FSM_classes.MultiDialog.menu.set()
        except Exception:
            await bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", parse_mode='html')
    else:
        await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ, "
                                                     "–æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ —á–∏—Å–ª–∞, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–ª–∏—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SME16, RCS28 –∏ –¥—Ä.)", parse_mode='html')
    await log_users(message)


@dp.message_handler(state=FSM_classes.MultiDialog.tech_support)
async def inline_quick_help(message: types.Message):
    db_data = sqlite3.connect('Databases/Data_users.db')
    cur_data = db_data.cursor()
    user_support = cur_data.execute('SELECT token FROM profile WHERE user_id = ?', (message.from_user.id,)).fetchone()
    await bot.send_message(chat_id=chats_id.support_chat_id, text=f"{str(message.from_user.id)}\n{user_support[0]}\n{str(message.text)}", parse_mode='html')
    await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç—á—ë—Ç –æ–± –æ—à–∏–±–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º! '
                                                 '\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç –ª—É—á—à–µ!'
                                                 '\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –µ—â—ë –æ–± –æ–¥–Ω–æ–π –æ—à–∏–±–∫–µ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /support')


@dp.message_handler(commands=['fix_tokens'], state='*', chat_id=[417986886, chats_id.commands_chat_id])
async def fix_tokens_users(message: types.Message):
    users_fix_tokens = [860113766, 566646368, 389638229, 5203851196, 324651616, 2099691929, 487050823, 5372058587, 758920281, 397822431, 239034067, 417986886]
    for i in range(len(users_fix_tokens)):
        await bot.send_message(chat_id=users_fix_tokens[i], text='–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! '
                                                                 '\n–î–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞, –≤—ã–¥–∞–Ω–Ω—ã–π –Ω–∞ —Ä–∞–±–æ—Ç–µ, '
                                                                 '–æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ —á–∏—Å–ª–∞, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–ª–∏—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SME16, RCS28, PREM12 –∏ –¥—Ä.)'
                                                                 '\n\n–í–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥—ë—Ç –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ! –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å! '
                                                                 '\n–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –≤–∞–º –∑–∞ –ø–æ–º–æ—â—å –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏!', parse_mode='html')
        state = dp.current_state(chat=users_fix_tokens[i], user=users_fix_tokens[i])
        await state.set_state(FSM_classes.MultiDialog.setToken)
        await bot.send_message(message.chat.id, text='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '+str(users_fix_tokens[i]))


@dp.message_handler(commands=['get_db'], state='*', chat_id=[417986886,chats_id.commands_chat_id])
async def get_db(message: types.Message):
    await bot.send_document(message.chat.id, open('Databases/Data_users.db', 'rb'))


@dp.message_handler(commands=['send_to_user'], state='*', chat_id=[417986886, chats_id.commands_chat_id])
async def send_to_user(message: types.Message):
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(FSM_classes.Admin.send_to_user_id)
    await bot.send_message(message.chat.id, text='–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –Ω–∞—á–∞–ª—å–Ω–∏–∫! –ü—Ä–∏—à–ª–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                           parse_mode='html')


@dp.message_handler(state=FSM_classes.Admin.send_to_user_id, chat_id=[417986886,chats_id.commands_chat_id])
async def send_to_user_id(message: types.Message):
    global send_to_user_id_remember
    send_to_user_id_remember = int(message.text)
    await bot.send_message(message.chat.id, text='–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å',
                           parse_mode='html')
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(FSM_classes.Admin.send_to_user_message)


@dp.message_handler(state=FSM_classes.Admin.send_to_user_message, chat_id=[417986886,chats_id.commands_chat_id])
async def send_to_user_message(message: types.Message):
    await bot.send_message(chat_id=send_to_user_id_remember, text=message.text, parse_mode='html')
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(FSM_classes.MultiDialog.menu)
    await bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '+str(send_to_user_id_remember)+' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


@dp.message_handler(commands=['agreement_mailing'], state='*', chat_id=[417986886, chats_id.commands_chat_id])
async def mailing_agreement(message: types.Message):
    await bot.send_message(message.chat.id,
                           text='–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞—Å—å')
    text_agreement = ('–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≤–∞–º –±—ã –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–±–æ—Ä–∫–∞–º–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π. '
                      '\n–í—Å–µ–≥–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–µ–Ω—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å')
    answer_agreement = InlineKeyboardMarkup(row_width=1, resize_keyboard=True).add(InlineKeyboardButton(text='–î–∞, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', callback_data='agreement_y'),
                                                                                   KeyboardButton(text='–ù–µ—Ç', callback_data='agreement_n'))
    db_data = sqlite3.connect('Databases/Data_users.db')
    cur_data = db_data.cursor()
    users = cur_data.execute(
        'SELECT user_id FROM profile').fetchall()
    file = open('Agreement_report.txt', 'w')
    for user_agreement in range(len(users)):
        try:
            await bot.send_message(chat_id=(users[user_agreement][0]),
                                   text=text_agreement, parse_mode='html', reply_markup=answer_agreement)
            file.write(f'\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ' + str(users[user_agreement][0]))
            await asyncio.sleep(0.1)
            db_data.commit()
        except BotBlocked:
            cur_data.execute('UPDATE profile SET user_id = 0 WHERE user_id = ?',
                             (users[user_agreement][0],))
            file.write(f'\n–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ' + str(users[user_agreement][0]))
            db_data.commit()
    cur_data.execute('DELETE FROM profile WHERE user_id = ?', (int(0),))
    db_data.commit()
    file = open('Agreement_report.txt', 'rb')
    await bot.send_message(chat_id=message.chat.id, text='–°–æ–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ!')
    await bot.send_document(message.chat.id, file)
    file.close()
    os.remove('Agreement_report.txt')


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('agreement_'), state='*')
async def callback_agreement(callback_query: types.CallbackQuery):
    db_data = sqlite3.connect('Databases/Data_users.db')
    cur_data = db_data.cursor()
    db_da = sqlite3.connect('Databases/Data_users.db')
    cur_da = db_da.cursor()
    await NEW_affirmation(user_id=callback_query.from_user.id, username=callback_query.from_user.username)
    cur_data.execute("UPDATE NEW_affirmation SET token = ? WHERE user_id = ?", (
    cur_da.execute('SELECT token FROM profile WHERE user_id = ?', (callback_query.from_user.id,)).fetchone()[0],
    callback_query.from_user.id))
    db_data.commit()
    if callback_query.data[-1] == 'y':
        cur_data.execute('UPDATE NEW_affirmation SET agree = ? WHERE user_id = ?', ('y', callback_query.from_user.id))
        await bot.send_message(callback_query.from_user.id, '–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –æ—Ç–≤–µ—Ç! –û—á–µ–Ω—å –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!')
    else:
        cur_data.execute('UPDATE NEW_affirmation SET agree = ? WHERE user_id = ?', ('n', callback_query.from_user.id))
        await bot.send_message(callback_query.from_user.id, '–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
    db_data.commit()


@dp.message_handler(commands=['admin_mailing'], state='*', chat_id=[417986886, chats_id.commands_chat_id])
async def check_active_users(message: types.Message):
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(FSM_classes.Admin.mailing_all)
    await bot.send_message(message.chat.id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –±–æ—Å—Å! –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å!',
                           parse_mode='html')


@dp.message_handler(commands=['receiving_feedback'], state='*')
async def start_feedback(message: types.Message):
    await bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(FSM_classes.adminCommands.receiving_feedback_password)


@dp.message_handler(state=FSM_classes.adminCommands.receiving_feedback_password, chat_id=[417986886,chats_id.commands_chat_id])
async def process_feedback(message: types.Message):
    if message.text == 'ad12min3':
        await bot.send_message(message.chat.id,
                               text='–†–∞—Å—Å—ã–ª–∫–∞ –æ–ø—Ä–æ—Å–∞ –Ω–∞—á–∞–ª–∞—Å—å')
        start_of_feedback = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! ' \
                            '\n\n–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã —É–¥–µ–ª–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —á–∞—Ç-–±–æ—Ç–µ? (6 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–Ω–∏–º—É—Ç —É –≤–∞—Å –Ω–µ –±–æ–ª–µ–µ 3 –º–∏–Ω—É—Ç)' \
                            '\n–í–∞—à –æ—Ç–≤–µ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥. ' \
                            '\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤—ã–±—Ä–∞–≤ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: ' \
                            '\n\n1. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ –ª–∏ –≤—ã —Å —á–∞—Ç-–±–æ—Ç–æ–º? '
        answer_1_keyboard = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True).add(KeyboardButton('–î–∞'), KeyboardButton('–ù–µ—Ç'))
        db_data = sqlite3.connect('Databases/Data_users.db')
        cur_data = db_data.cursor()
        users = cur_data.execute(
            'SELECT user_id FROM profile').fetchall()
        for user_mailing in range(len(users)):
            try:
                await bot.send_message(chat_id=(users[user_mailing][0]),
                                       text=start_of_feedback, parse_mode='html', reply_markup=answer_1_keyboard)
                await data_feedback(user_id=users[user_mailing][0])
                state = dp.current_state(chat=users[user_mailing][0], user=users[user_mailing][0])
                await state.set_state(FSM_classes.Feedback.answer_1_yn)
                await asyncio.sleep(0.1)
            except BotBlocked:
                cur_data.execute('UPDATE profile SET user_id = 0 WHERE user_id = ?',
                                 (users[user_mailing][0],))
                db_data.commit()
        cur_data.execute('DELETE FROM profile WHERE user_id = ?', (int(0),))
        db_data.commit()
        await bot.send_message(message.chat.id,
                               text='–û–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã!')
    else:
        await bot.send_message(message.from_user.id, text='–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!'
                                                          '\n/receiving_feedback - –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å '
                                                          '\n/main_menu - –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')


@dp.message_handler(content_types=['text'], state=FSM_classes.Feedback.answer_1_yn)
async def feedback_answer_1(message: types.Message):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE feedback SET answer_1_yn = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    answer_2_keyboard = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True).add(KeyboardButton('–û—á–µ–Ω—å –ø–æ–ª–µ–∑–µ–Ω'), KeyboardButton('–ü–æ–ª–µ–∑–µ–Ω, –Ω–æ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏'),
                                                  KeyboardButton('–ï—Å—Ç—å –ø–æ–ª—å–∑–∞, –Ω–æ –º–Ω–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤'), KeyboardButton('–ë–µ—Å–ø–æ–ª–µ–∑–µ–Ω'), KeyboardButton('–ï—â—ë –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª'))
    await bot.send_message(message.from_user.id,
                           text='2. –ù–∞—Å–∫–æ–ª—å–∫–æ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –≤–∞—Å —á–∞—Ç-–±–æ—Ç?', parse_mode='html', reply_markup=answer_2_keyboard)
    await FSM_classes.Feedback.answer_2_choose.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.Feedback.answer_2_choose)
async def feedback_answer_2(message: types.Message):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE feedback SET answer_2_choose = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    answer_3_keyboard = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True).add(KeyboardButton('–û–±—â–∞—Ç—å—Å—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ'), KeyboardButton('–û–±—â–∞—Ç—å—Å—è —Å–∫–æ—Ä–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ, –Ω–æ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏'),
                                                  KeyboardButton('–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ–±—â–µ–Ω–∏—è –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ'), KeyboardButton('–ù–µ–ø—Ä–∏—è—Ç–Ω–æ –æ–±—â–∞—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è –ª–∏—á–Ω—ã–µ —Ç–µ–º—ã'))
    await bot.send_message(message.from_user.id,
                           text='3. –ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç-–±–æ—Ç–æ–º –Ω–∞ —Ç–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∞—à–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º?', parse_mode='html', reply_markup=answer_3_keyboard)
    await FSM_classes.Feedback.answer_3_choose.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.Feedback.answer_3_choose)
async def feedback_answer_2(message: types.Message):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE feedback SET answer_3_choose = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    await bot.send_message(message.from_user.id,
                           text='4. –ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å –∫–∞–∫–∏–µ-–ª–∏–±–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫, —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π)? '
                                '\n–ï—Å–ª–∏ –¥–∞, —Ç–æ –±—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –≤—ã –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –æ–ø—ã—Ç–æ–º', parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
    await FSM_classes.Feedback.answer_4.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.Feedback.answer_4)
async def feedback_answer_2(message: types.Message):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE feedback SET answer_4 = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    await bot.send_message(message.from_user.id,
                           text='5. –ò–∑–º–µ–Ω–∏–ª–∏ –ª–∏ –≤—ã —á—Ç–æ-—Ç–æ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç-–±–æ—Ç–µ? '
                                '\n–ï—Å–ª–∏ –¥–∞, —Ç–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ', parse_mode='html')
    await FSM_classes.Feedback.answer_5.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.Feedback.answer_5)
async def feedback_answer_2(message: types.Message):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE feedback SET answer_5 = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    await bot.send_message(message.from_user.id,
                           text='6. –ï—Å—Ç—å –ª–∏ —Ç–æ, —á—Ç–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –≤–∏–¥–µ—Ç—å –≤ —á–∞—Ç-–±–æ—Ç–µ –≤ –±—É–¥—É—â–µ–º? '
                                '\n–ï—Å–ª–∏ –¥–∞, —Ç–æ –±—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ —Ç–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å', parse_mode='html')
    await FSM_classes.Feedback.answer_6.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.Feedback.answer_6)
async def feedback_answer_2(message: types.Message):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE feedback SET answer_6 = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    await bot.send_message(message.from_user.id,
                           text='–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è? '
                                '\n–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ‚Äú–Ω–µ—Ç‚Äù', parse_mode='html')
    await FSM_classes.Feedback.answer_extra.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.Feedback.answer_extra)
async def feedback_answer_2(message: types.Message, state: FSMContext):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE feedback SET answer_extra = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    await bot.send_message(message.from_user.id,
                           text='–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! '
                                '\n–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å —á–∞—Ç-–±–æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!', parse_mode='html')
    await FSM_classes.MultiDialog.menu.set()
    await main_menu(message, state)

## Feedback marathon


@dp.message_handler(commands=['fb_marathon'], state='*')
async def start_fb_marathon(message: types.Message):
    await bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(FSM_classes.adminCommands.FB_marathon_password)


@dp.message_handler(state=FSM_classes.adminCommands.FB_marathon_password, chat_id=[417986886, chats_id.commands_chat_id])
async def process_fb_marathon(message: types.Message):
    if message.text == 'ad12min3':
        await bot.send_message(message.chat.id,
                               text='–†–∞—Å—Å—ã–ª–∫–∞ –æ–ø—Ä–æ—Å–∞ –Ω–∞—á–∞–ª–∞—Å—å')
        start_of_feedback = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! ' \
                            '\n\n–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã —É–¥–µ–ª–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –≤—Ç–æ—Ä–æ–º –¥–Ω–µ –Ω–∞—à–µ–≥–æ –ø—É—Ç–∏? \n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ –±—É–¥—É—â–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞–º –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç' \
                            '\n\n1) –ö–∞–∫ –ø—Ä–æ—à—ë–ª –≤–∞—à –¥–µ–Ω—å? (–æ—Ü–µ–Ω–∏—Ç–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10)'
        answer_1_keyboard = ReplyKeyboardMarkup(row_width=5, resize_keyboard=True).add(KeyboardButton('üò≠'), KeyboardButton('2'), KeyboardButton('3'), KeyboardButton('4'), KeyboardButton('üòï'), KeyboardButton('üòê'), KeyboardButton('7'), KeyboardButton('8'), KeyboardButton('9'), KeyboardButton('üòÉ'))
        db_data = sqlite3.connect('Databases/Data_users.db')
        cur_data = db_data.cursor()
        db_da = sqlite3.connect('Databases/Data_users.db')
        cur_da = db_da.cursor()
        users = cur_data.execute(
            'SELECT user_id FROM profile').fetchall()
        file = open('Quiz_report.txt', 'w')
        for user_mailing in range(len(users)):
            try:
                await bot.send_message(chat_id=(users[user_mailing][0]),
                                       text=start_of_feedback, parse_mode='html', reply_markup=answer_1_keyboard)
                await data_FB_marathon(user_id=users[user_mailing][0])
                cur_data.execute("UPDATE FB_marathon_2 SET token = ? WHERE user_id = ?", (cur_da.execute('SELECT token FROM profile WHERE user_id = ?', (users[user_mailing][0],)).fetchone()[0], users[user_mailing][0]))
                file.write(f'\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ' + str(users[user_mailing][0]))
                state = dp.current_state(chat=users[user_mailing][0], user=users[user_mailing][0])
                await state.set_state(FSM_classes.FB_marathon.answer_1)
                await asyncio.sleep(0.1)
                db_data.commit()
            except BotBlocked:
                cur_data.execute('UPDATE profile SET user_id = 0 WHERE user_id = ?',
                                 (users[user_mailing][0],))
                file.write(f'\n–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ' + str(users[user_mailing][0]))
                db_data.commit()
        cur_data.execute('DELETE FROM profile WHERE user_id = ?', (int(0),))
        db_data.commit()
        file = open('Quiz_report.txt', 'rb')
        await bot.send_message(chat_id=message.chat.id, text='–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω!')
        await bot.send_document(message.chat.id, file)
        file.close()
        os.remove('Quiz_report.txt')
    else:
        await bot.send_message(message.chat.id, text='–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!'
                                                          '\n/receiving_feedback - –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å '
                                                          '\n/main_menu - –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')


@dp.message_handler(content_types=['text'], state=FSM_classes.FB_marathon.answer_1)
async def feedback_answer_1(message: types.Message):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE FB_marathon_2 SET answer_1 = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    answer_2_keyboard = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True).add(KeyboardButton('–î–∞'), KeyboardButton('–ù–µ —É–≤–µ—Ä–µ–Ω'), KeyboardButton('–ù–µ—Ç'))
    await bot.send_message(message.from_user.id,
                           text='2) –ü—Ä–∏–Ω—ë—Å –ª–∏ –≤–∞–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–æ–≤—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è?', parse_mode='html', reply_markup=answer_2_keyboard)
    await FSM_classes.FB_marathon.answer_2.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.FB_marathon.answer_2)
async def feedback_answer_2(message: types.Message):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE FB_marathon_2 SET answer_2 = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    answer_3_keyboard = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True).add(KeyboardButton('–î–∞'), KeyboardButton('–ù–µ —É–≤–µ—Ä–µ–Ω'),
                                                  KeyboardButton('–ù–µ—Ç'))
    await bot.send_message(message.from_user.id,
                           text='3) –ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ª–∏ –≤–∞–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ø–æ–¥–±–æ—Ä–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ç–µ–æ—Ä–∏–∏?', parse_mode='html', reply_markup=answer_3_keyboard)
    await FSM_classes.FB_marathon.answer_3.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.FB_marathon.answer_3)
async def feedback_answer_3(message: types.Message):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE FB_marathon_2 SET answer_3 = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    answer_4_keyboard = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True).add(KeyboardButton('–î–∞'), KeyboardButton('–ù–µ —É–≤–µ—Ä–µ–Ω'),
                                                  KeyboardButton('–ù–µ—Ç'))
    await bot.send_message(message.from_user.id,
                           text='4) –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ª–∏ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É?', parse_mode='html', reply_markup=answer_4_keyboard)
    await FSM_classes.FB_marathon.answer_4.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.FB_marathon.answer_4)
async def feedback_answer_4(message: types.Message):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE FB_marathon_2 SET answer_4 = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    answer_5_keyboard = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True).add(KeyboardButton('–î–∞'), KeyboardButton('–ù–µ —É–≤–µ—Ä–µ–Ω'),
                                                  KeyboardButton('–ù–µ—Ç'))
    await bot.send_message(message.from_user.id,
                           text='5) –ü–æ–º–æ–≥–ª–∞ –ª–∏ –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –±—ã—Ç—å –≤ —Ä–µ—Å—É—Ä—Å–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?', parse_mode='html', reply_markup=answer_5_keyboard)
    await FSM_classes.FB_marathon.answer_5.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.FB_marathon.answer_5)
async def feedback_answer_5(message: types.Message):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE FB_marathon_2 SET answer_5 = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    answer_6_keyboard = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True).add(KeyboardButton('–î–∞'), KeyboardButton('–ù–µ —É–≤–µ—Ä–µ–Ω'),
                                                  KeyboardButton('–ù–µ—Ç'))
    await bot.send_message(message.from_user.id,
                           text='6) –£–¥–∞–ª–æ—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è?', parse_mode='html', reply_markup=answer_6_keyboard)
    await FSM_classes.FB_marathon.answer_6.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.FB_marathon.answer_6)
async def feedback_answer_6(message: types.Message, state: FSMContext):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE FB_marathon_2 SET answer_6 = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    await bot.send_message(message.from_user.id,
                           text='–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –≤–∞–º –æ–±—â–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º üìù \n–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –ª—é–±—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!', parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
    await FSM_classes.FB_marathon.answer_7.set()


@dp.message_handler(content_types=['text'], state=FSM_classes.FB_marathon.answer_7)
async def feedback_answer_7(message: types.Message, state: FSMContext):
    db_f = sqlite3.connect('Databases/Data_users.db')
    cur_f = db_f.cursor()
    cur_f.execute("UPDATE FB_marathon_2 SET answer_7 = ? WHERE user_id = ?", (message.text, message.from_user.id))
    db_f.commit()
    await bot.send_message(message.from_user.id,
                           text='–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! '
                                '\n–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å —á–∞—Ç-–±–æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!', parse_mode='html')
    await FSM_classes.MultiDialog.menu.set()
    await main_menu(message, state)


@dp.callback_query_handler(state=FSM_classes.MultiDialog.quick_help)
async def inline_quick_help(callback_query: types.CallbackQuery):
    await quick_help.all_way_callback_quick_help(callback_query)


@dp.message_handler(state=FSM_classes.MultiDialog.quick_help)
async def reply_quick_help(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await FSM_classes.MultiDialog.menu.set()
        await main_menu(message, state)
    await quick_help.all_way_quick_help(message)


@dp.message_handler(commands=['getuserreport'], state='*')
async def get_user_report(message: types.Message):
    await bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    await FSM_classes.adminCommands.getUserReportPassword.set()


@dp.message_handler(state=FSM_classes.adminCommands.getUserReportPassword)
async def get_user_report(message: types.Message, state: FSMContext):
    if message.text == 'admin123':
        await bot.send_message(message.chat.id,
                               text='–í–≤–µ–¥–∏—Ç–µ id –Ω—É–∂–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "–≤—Å–µ"')
        await FSM_classes.adminCommands.getUserReportId.set()
    else:
        await bot.send_message(message.chat.id, text='–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!'
                                                          '\n/getuserreport - –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å '
                                                          '\n/main_menu - –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')


@dp.message_handler(state=FSM_classes.adminCommands.getUserReportId)
async def get_user_report(message: types.Message, state: FSMContext):
    await state.set_data({"users": message.text})
    await bot.send_message(message.chat.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥:–º–º:–¥–¥')
    await FSM_classes.adminCommands.getUserReportDate.set()


@dp.message_handler(state=FSM_classes.adminCommands.getUserReportDate)
async def get_user_report(message: types.Message, state: FSMContext):
    users = await state.get_data("users")
    try:
        startDate, endDate = message.text.split(' ')
    except:
        await bot.send_message(message.chat.id, text='–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë')
        await FSM_classes.adminCommands.getUserReportDate.set()
        return

    startDate = startDate.replace(':', '')
    endDate = endDate.replace(':', '')
    users = str(users['users']).split(' ')
    if len(users) == 1 and users[0] == '–≤—Å–µ':
        users = await get_all_user_ids()
        users = [str(user[0]) for user in users]

    await admin_commands.createExcelFileReportCommand(startDate,endDate,users)
    with open('userData.xlsx', 'rb') as f:
        await bot.send_document(chat_id=message.from_user.id, document=InputFile(f))


@dp.message_handler(commands=['getuseractions'], state='*')
async def get_user_report(message: types.Message):
    await bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    await FSM_classes.adminCommands.getUserActionPassword.set()


@dp.message_handler(state=FSM_classes.adminCommands.getUserActionPassword)
async def get_user_report(message: types.Message, state: FSMContext):
    if message.text == 'admin123':
        await bot.send_message(message.chat.id,
                               text='–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –Ω—É–∂–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "–≤—Å–µ"')
        await FSM_classes.adminCommands.getUserActionId.set()
    else:
        await bot.send_message(message.chat.id, text='–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!'
                                                          '\n/getuserreport - –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å '
                                                          '\n/main_menu - –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')


@dp.message_handler(state=FSM_classes.adminCommands.getUserActionId)
async def get_user_report(message: types.Message, state: FSMContext):
    await state.set_data({"users": message.text})
    await bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    await FSM_classes.adminCommands.getUserActionDate.set()


@dp.message_handler(state=FSM_classes.adminCommands.getUserActionDate)
async def get_user_report(message: types.Message, state: FSMContext):
    tokens = await state.get_data("users")
    startDate, endDate = message.text.split(' ')
    tokens = str(tokens['users']).split(' ')

    if len(tokens) == 1 and tokens[0] == '–≤—Å–µ':
        await admin_commands.createExcelFileActionsForAllUsersWithTokens(startDate, endDate)
    else:
        await admin_commands.createExcelFileActionCommand(startDate, endDate, tokens)

    with open('getUserAction.xlsx', 'rb') as f:
        await bot.send_document(chat_id=message.chat.id, document=InputFile(f))
    await FSM_classes.MultiDialog.menu.set()
    await main_menu(message, state)


@dp.message_handler(commands=['getuserreportgraph'], state='*')
async def get_user_report(message: types.Message):
    await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ñ–æ—Ä–º–∞—Ç–∞ –¥–¥:–º–º:–≥–≥–≥–≥')
    await FSM_classes.adminCommands.getUserReportGraphDate.set()


@dp.message_handler(state=FSM_classes.adminCommands.getUserReportGraphDate)
async def get_user_report(message: types.Message, state: FSMContext):
    try:
        dateStart = datetime.strptime(message.text, '%d:%m:%Y')
        await bot.send_message(message.from_user.id, text='–ì—Ä–∞—Ñ–∏–∫ –≤–∞—à–µ–≥–æ –ø—Ä–∏–µ–º–∞ –≤–æ–¥—ã',reply_markup=Markups.backHabitRe)
        with open("scatter_plot.png", "rb") as f:
            photo = InputFile(f)
            await bot.send_photo(message.from_user.id, photo)
        await admin_commands.createGraphReportCommand(dateStart,message.from_user.id)
        await FSM_classes.MultiDialog.menu.set()
    except ValueError:
        await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–µ–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!\n'
                                                          '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º:–≥–≥–≥–≥')
        await FSM_classes.adminCommands.getUserReportGraphDate.set()


@dp.message_handler(content_types=['photo'], state=FSM_classes.Admin.mailing_all, chat_id=[417986886, chats_id.commands_chat_id])
async def mailing_photo(message: types.Message):
    await message.photo[-1].download(destination_file='mailing.jpg')
    db_user_blocked = sqlite3.connect('Databases/Data_users.db')
    cur_user_blocked = db_user_blocked.cursor()
    users = cur_user_blocked.execute('SELECT user_id FROM profile').fetchall()
    await bot.send_message(chat_id=message.chat.id, text='–ü–æ–ª—É—á–µ–Ω–æ, —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å',
                           parse_mode='html')
    await FSM_classes.MultiDialog.menu.set()
    file = open('Mailing_report.txt', 'w')
    for user in range(len(users)):
        try:
            photo_mailing = open('mailing.jpg', 'rb')
            await bot.send_photo(chat_id=(users[user][0]), photo=photo_mailing, parse_mode='html')
            file.write(f'\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '+str(users[user][0]))
            await asyncio.sleep(0.1)
        except BotBlocked:
            cur_user_blocked.execute(
                'UPDATE profile SET active = "–ù–µ—Ç" WHERE user_id = ?', (users[user][0],))
            await bot.send_message(chat_id=message.chat.id, text='–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω '+str(users[user][0]), parse_mode='html')
            file.write(f'\n–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω '+str(users[user][0]))
            db_user_blocked.commit()
    file = open('Mailing_report.txt', 'rb')
    await bot.send_message(chat_id=message.chat.id, text='–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –í—ã –º–æ–ª–æ–¥–µ—Ü, –±–æ—Å—Å!')
    await bot.send_document(message.chat.id, file)
    file.close()
    os.remove('Mailing_report.txt')


@dp.message_handler(content_types=['audio'], state=FSM_classes.Admin.mailing_all, chat_id=[417986886, chats_id.commands_chat_id])
async def mailing_audio(message: types.Message):
    await message.audio.download(destination_file=str(message.audio.file_name))
    db_user_blocked = sqlite3.connect('Databases/Data_users.db')
    cur_user_blocked = db_user_blocked.cursor()
    users = cur_user_blocked.execute('SELECT user_id FROM profile').fetchall()
    await bot.send_message(chat_id=message.chat.id, text='–ü–æ–ª—É—á–µ–Ω–æ, —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å',
                           parse_mode='html')
    await FSM_classes.MultiDialog.menu.set()
    file = open('Mailing_report.txt', 'w')
    for user in range(len(users)):
        try:
            audio_mailing = open(str(message.audio.file_name), 'rb')
            await bot.send_audio(chat_id=(users[user][0]), audio=audio_mailing, parse_mode='html')
            file.write(f'\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '+str(users[user][0]))
            await asyncio.sleep(0.1)
        except BotBlocked:
            cur_user_blocked.execute(
                'UPDATE profile SET active = "–ù–µ—Ç" WHERE user_id = ?', (users[user][0],))
            await bot.send_message(chat_id=message.chat.id, text='–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω '+str(users[user][0]), parse_mode='html')
            file.write(f'\n–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω '+str(users[user][0]))
            db_user_blocked.commit()
    os.remove(message.audio.file_name)
    file = open('Mailing_report.txt', 'rb')
    await bot.send_message(chat_id=message.chat.id, text='–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –í—ã –º–æ–ª–æ–¥–µ—Ü, –±–æ—Å—Å!')
    await bot.send_document(message.chat.id, file)
    file.close()
    os.remove('Mailing_report.txt')


@dp.message_handler(content_types=['text'], state=FSM_classes.Admin.mailing_all, chat_id=[417986886, chats_id.commands_chat_id])
async def mailing_text(message: types.Message):
    db_user_blocked = sqlite3.connect('Databases/Data_users.db')
    cur_user_blocked = db_user_blocked.cursor()
    users = cur_user_blocked.execute('SELECT user_id FROM profile').fetchall()
    await bot.send_message(chat_id=message.chat.id, text='–ü–æ–ª—É—á–µ–Ω–æ, —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å',
                           parse_mode='html')
    await FSM_classes.MultiDialog.menu.set()
    file = open('Mailing_report.txt', 'w')
    for user in range(len(users)):
        try:
            await bot.send_message(chat_id=(users[user][0]),
                                   text=message.text, parse_mode='html')
            file.write(f'\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '+str(users[user][0]))
            await asyncio.sleep(0.1)
        except BotBlocked:
            cur_user_blocked.execute(
                'UPDATE profile SET active = "–ù–µ—Ç" WHERE user_id = ?', (users[user][0],))
            await bot.send_message(chat_id=message.chat.id, text='–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω '+str(users[user][0]), parse_mode='html')
            file.write(f'\n–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω '+str(users[user][0]))
            db_user_blocked.commit()
    file = open('Mailing_report.txt', 'rb')
    await bot.send_message(chat_id=message.chat.id, text='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –í—ã –º–æ–ª–æ–¥–µ—Ü, –±–æ—Å—Å!')
    await bot.send_document(message.chat.id, file)
    file.close()
    os.remove('Mailing_report.txt')


@dp.message_handler(commands=['smart_mailing'], state='*', chat_id=[417986886, chats_id.commands_chat_id])
async def smart_mailing(message: types.Message):
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(FSM_classes.Admin.smart_mailing)
    global text_smart_mailing
    global keyboards_
    text_smart_mailing = []
    keyboards_ = ['–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–ü—Ä–æ–¥–æ–ª–∂–∞–π', '–î–∞–ª—å—à–µ', '–ü—Ä–æ–¥–æ–ª–∂–∞–π']
    await bot.send_message(message.chat.id, text='–°–º–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ 5 –∫—É—Å–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ —è –∑–∞–ø–æ–º–Ω—é –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ',
                           parse_mode='html')


@dp.message_handler(content_types=['text'], state=FSM_classes.Admin.smart_mailing, chat_id=[417986886, chats_id.commands_chat_id])
async def smart_mailing_text_recording(message: types.Message):
    text_smart_mailing.append(str(message.text))
    if len(text_smart_mailing) <= 4:
        await bot.send_message(message.chat.id, text='–ü–æ–ª—É—á–∏–ª —á–∞—Å—Ç—å ‚Ññ '+str(len(text_smart_mailing)))
    else:
        await bot.send_message(message.chat.id, text='–ü–æ–ª—É—á–∏–ª —á–∞—Å—Ç—å ‚Ññ '+str(len(text_smart_mailing)))
        db_user_blocked = sqlite3.connect('Databases/Data_users.db')
        cur_user_blocked = db_user_blocked.cursor()
        users = cur_user_blocked.execute('SELECT user_id FROM profile').fetchall()
        await bot.send_message(chat_id=message.chat.id, text='–ü–æ–ª—É—á–µ–Ω–æ, —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å',
                               parse_mode='html')
        await FSM_classes.MultiDialog.menu.set()
        file = open('Smart_mailing_report.txt', 'w')
        for user in range(len(users)):
            try:
                await bot.send_message(chat_id=(users[user][0]),
                                       text=text_smart_mailing[0], parse_mode='html',
                                       reply_markup=InlineKeyboardMarkup(resize_keyboard=True).add(InlineKeyboardButton(text=str(keyboards_[0]), callback_data='smart_mailing_continue1')))
                file.write(f'\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ' + str(users[user][0]))
                await asyncio.sleep(0.1)
            except BotBlocked:
                cur_user_blocked.execute(
                    'UPDATE profile SET active = "–ù–µ—Ç" WHERE user_id = ?', (users[user][0],))
                await bot.send_message(chat_id=message.chat.id, text='–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ' + str(users[user][0]),
                                       parse_mode='html')
                file.write(f'\n–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ' + str(users[user][0]))
                db_user_blocked.commit()
        file = open('Smart_mailing_report.txt', 'rb')
        await bot.send_message(chat_id=message.chat.id, text='–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        await bot.send_document(message.chat.id, file)
        file.close()
        os.remove('Smart_mailing_report.txt')


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('smart_mailing_continue'), state='*')
async def smart_mailing_continue(callback_query: types.CallbackQuery, state: FSMContext):
    if int(callback_query.data[-1]) < 4:
        await bot.send_message(callback_query.from_user.id, text=text_smart_mailing[int(callback_query.data[-1])], parse_mode='html',
                           reply_markup=InlineKeyboardMarkup(resize_keyboard=True).add(InlineKeyboardButton(text=str(keyboards_[int(callback_query.data[-1])]), callback_data='smart_mailing_continue'+str(int(int(callback_query.data[-1])+1)))))
    else:
        await bot.send_message(callback_query.from_user.id, text=text_smart_mailing[int(callback_query.data[-1])], parse_mode='html')
        await bot.send_message(chat_id=chats_id.reports_chat_id,
                               text=f"{str(callback_query.from_user.id)}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É",
                               parse_mode='html')


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('Welcome_btn'), state=FSM_classes.MultiDialog.menu)
async def mailing(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data[-1] == '0':
        enterIn = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(
            KeyboardButton('–ß—É–≤—Å—Ç–≤—É—é –ø—Ä–æ–±–ª–µ–º—É'),
            KeyboardButton('–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç'))
        await bot.send_message(callback_query.from_user.id,
                               '–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?'
                               '\n\n–ù–∞–∂–º–∏—Ç–µ "–ß—É–≤—Å—Ç–≤—É—é –ø—Ä–æ–±–ª–µ–º—É", —á—Ç–æ–±—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º '
                               '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 36 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å '
                               '–Ω–∞—à–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –ø—Ä–∞–∫—Ç–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è!',
                               parse_mode='html', reply_markup=enterIn)


@dp.message_handler(commands=['practices'], state='*')
async def practices(message: types.Message):
    await FSM_classes.MultiDialog.practices.set()
    await Practices.type_practices(message)
    await save_user_action(user_id=message.from_user.id, action='/practices')


@dp.message_handler(commands=['support'], state='*')
async def support(message: types.Message):
    await bot.send_message(message.from_user.id,
                           text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –æ—à–∏–±–∫—É —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º')
    await FSM_classes.MultiDialog.tech_support.set()
    await save_user_action(user_id=message.from_user.id, action='/support')


@dp.message_handler(commands=['test'], state='*')
async def test(message: types.message, state: FSMContext):
    await FSM_classes.MultiDialog.tests.set()
    await Tests.pretest(message, state)
    await log_users(message)
    await save_user_action(user_id=message.from_user.id, action='/test')


@dp.message_handler(commands=['courses'], state='*')
async def courses(message: types.Message, state: FSMContext):
    await FSM_classes.MultiDialog.courses.set()
    await Courses.precourse(message, state)
    await log_users(message)
    await save_user_action(user_id=message.from_user.id, action='/courses')


@dp.message_handler(commands=['contacts'], state='*')
async def contacts(message: types.Message):
    await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! '
                                                 '–ú–µ–Ω—è –∑–æ–≤—É—Ç Reform. –Ø –æ–∫–∞–∑—ã–≤–∞—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
                                                 '–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ —á—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –Ω–æ –º–µ–Ω—è —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—Ç —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º.'
                                                 '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @APecherkin.',
                           parse_mode='html', reply_markup=Markups.cont)
    await log_users(message)
    await save_user_action(user_id=message.from_user.id, action='/contacts')


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('Main_menu'), state='*')
async def main_menu_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await FSM_classes.HabitSleep.none.set()
    await FSM_classes.MultiDialog.menu.set()
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ù–µ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?'
                                                        '\n\nüßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç—è–∂—ë–ª–æ–≥–æ –¥–Ω—è –∏–ª–∏ —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è'
                                                        '\nüìù –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É'
                                                        '\nüí™ –¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–º–æ–∂–µ—Ç –≤–Ω–µ–¥—Ä–∏—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–≤—ã–∫–∏'
                                                        '\nüå≥ –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –Ω–µ –æ—á–µ–Ω—å? –†–∞–∑–±–µ—Ä–∏—Ç–µ—Å—å –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Å–µ–±–µ –∏ –≤—ã—è–≤–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É'
                                                        '\nüí¨ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'
                                                        '\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
                           parse_mode='html', reply_markup=Markups.main_kb)


@dp.message_handler(state=FSM_classes.MultiDialog.practices)
async def reply_practices(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
    await Practices.allreply_practices(message)
    await log_users(message)


@dp.message_handler(state=FSM_classes.MultiDialog.specialist)
async def reply_specialist(message: types.Message, state: FSMContext):
    if message.text == '–ü–µ—Ä–µ–π—Ç–∏':
        await Specialists.choose_specialist(message, state)
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await FSM_classes.MultiDialog.menu.set()
        await main_menu(message, state)
    await Specialists.test_holms(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.MultiDialog.tests)
async def reply_tests(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await FSM_classes.MultiDialog.menu.set()
        await main_menu(message, state)
    await Tests.type_test(message, state)
    await log_users(message)


@dp.message_handler(state=(
        FSM_classes.MultiDialog.test_weariness or FSM_classes.MultiDialog.test_control or FSM_classes.MultiDialog.test_selfefficacy or FSM_classes.MultiDialog.test_typeperson or FSM_classes.MultiDialog.test_stress))
async def reply_alltests(message: types.Message, state: FSMContext):
    if message.text == '–ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç –∏ –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é':
        await FSM_classes.MultiDialog.menu.set()
        await main_menu(message, state)
        await log_users(message)


@dp.message_handler(state=FSM_classes.MultiDialog.courses)
async def reply_courses(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await main_menu(message, state)
    await Courses.type_course(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.MultiDialog.course_anxiety)
async def reply_anxiety(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await FSM_classes.MultiDialog.menu.set()
        await main_menu(message, state)
        await log_users(message)


@dp.callback_query_handler(state=FSM_classes.MultiDialog.course_anxiety)
async def reply_anxiety(callback_query: types.CallbackQuery, state: FSMContext):
    await Anxiety.Course_Anxiety(callback_query, state)


@dp.message_handler(state=FSM_classes.MultiDialog.habits)
async def reply_habits(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
    await Habit.choose_habit(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.HabitWater.choose_action)
async def reply_habit_water(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
    await Water.choose_habit_action(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.HabitWater.choose_amount_of_portion)
async def reply_habit_water(message: types.Message, state: FSMContext):
    await Water.choose_habit_water_portions(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.HabitWater.choose_schedule)
async def reply_habit_water(message: types.Message, state: FSMContext):
    await Water.choose_habit_water_schedule(message, state)
    await log_users(message)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('answerWater'), state='*')
async def reply_habit_water(callback_query: types.CallbackQuery, state: FSMContext):
    await Water.answer_water_schedule(callback_query, state)
    await FSM_classes.MultiDialog.menu.set()
    await log_users(callback_query.message)


@dp.message_handler(state=FSM_classes.HabitSleep.choose_action)
async def reply_habit_sleep(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
    await Sleep.choose_habit_action(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.HabitSleep.choose_wakeup)
async def reply_habit_sleep(message: types.Message, state: FSMContext):
    await Sleep.choose_habit_sleep_wakeup(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.HabitSleep.choose_bedtime)
async def reply_habit_sleep(message: types.Message, state: FSMContext):
    await Sleep.choose_habit_sleep_bedtime(message, state)
    await log_users(message)


@dp.message_handler(state=FSM_classes.MultiDialog.specialist)
async def reply_specialist(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
    await Specialists.choose_specialist(message, state)
    await log_users(message)


@dp.message_handler(state='*')
async def reply_all(message: types.Message, state: FSMContext):
    await save_user_action(user_id=message.from_user.id, action=message.text)
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(message, state)
        await log_users(message)

    if message.text == '–ß—É–≤—Å—Ç–≤—É—é –ø—Ä–æ–±–ª–µ–º—É':
        await FSM_classes.MultiDialog.quick_help.set()
        await bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ', reply_markup=quick_help.quick_help_menu)
        await log_users(message)
        await quick_help.all_way_quick_help(message)

    if message.text == '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç':
        await FSM_classes.MultiDialog.test_weariness.set()
        await pre_points_test_weariness(user_id=message.from_user.id, username=message.from_user.username)
        await pre_answers_test_weariness(user_id=message.from_user.id, username=message.from_user.username)
        async with state.proxy() as data:
            data['count'] = 0
        async with state.proxy() as data:
            data['points'] = 0
        await points_test_weariness(state, user_id=message.from_user.id)
        await state.finish()
        await bot.send_message(message.from_user.id, text=Psy_Weariness.weariness_questions[0], reply_markup=Psy_Weariness.answers)
        db_weariness = sqlite3.connect('Databases/Result_Tests/PSY_Weariness.db')
        cur_weariness = db_weariness.cursor()
        cur_weariness.execute("UPDATE answers SET countOfAnswers = 0 WHERE user_id = ?", (message.from_user.id,))
        db_weariness.commit()

    if message.text == 'üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∏':
        await FSM_classes.MultiDialog.practices.set()
        await Practices.type_practices(message)
        await log_users(message)

    if message.text == 'üìù –¢–µ—Å—Ç—ã':
        await FSM_classes.MultiDialog.tests.set()
        await Tests.pretest(message, state)
        await log_users(message)

    if message.text == 'üí™ –ü—Ä–∏–≤—ã—á–∫–∏':
        await FSM_classes.MultiDialog.habits.set()
        await Habit.prehabits(message, state)
        await log_users(message)

    if message.text == 'üò® –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞':
        await FSM_classes.MultiDialog.quick_help.set()
        await bot.send_message(message.from_user.id,
                               text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ',
                               reply_markup=quick_help.quick_help_menu)
        await log_users(message)
        await quick_help.all_way_quick_help(message)

    if message.text == 'üí¨ –û–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É':
        await FSM_classes.MultiDialog.specialist.set()
        await Specialists.choose_specialist(message, state)
        await log_users(message)

    if message.text == 'üì• –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await contacts(message)
        await log_users(message)

    if message.text == '‚öôÔ∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        await bot.send_message(message.from_user.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –æ—à–∏–±–∫—É —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º')
        await FSM_classes.MultiDialog.tech_support.set()
        await log_users(message)

    if message.text == '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?':
        back = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        back.add(btn1)
        await bot.send_message(message.from_user.id,
                               '–Ø –º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏. '
                               '\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å—Å—è –∏–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –Ω–µ –≤–∞–∂–Ω–æ. '
                               '\n–í —Ä–∞–∑–¥–µ–ª–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—É –∏ —Ä–µ—à–∏—Ç—å –µ—ë —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.'
                               '\n–í —Ä–∞–∑–¥–µ–ª–µ –º—É–∑—ã–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥–ª—è —Å–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–µ–ª–æ–¥–∏—é –∏ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è'
                               '\n–¢–∞–∫–∂–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –≤ —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞, –Ω–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –Ω–µ –æ—á–µ–Ω—å, —Ç–æ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã –∏ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è'
                               '\n\n –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –∂–∏–∑–Ω–∏ –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å–æ —Å–≤–æ–∏–º –º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º!',
                               parse_mode='html', reply_markup=back)
        await log_users(message)


@dp.channel_post_handler(content_types=['text'])
async def affirmation_mailing_text(message: types.Message):
    db_data = sqlite3.connect('Databases/Data_users.db')
    cur_data = db_data.cursor()
    users_affirmation = cur_data.execute(
        'SELECT user_id FROM NEW_affirmation WHERE agree = ?', ('y',)).fetchall()
    for user_miling in range(len(users_affirmation)):
        try:
            await bot.send_message(chat_id=(users_affirmation[user_miling][0]),
                                   text=message.text, parse_mode='html')
            await asyncio.sleep(0.1)
        except BotBlocked:
            cur_data.execute('UPDATE NEW_affirmation SET user_id = 0 WHERE user_id = ?',
                             (users_affirmation[user_miling][0],))
            db_data.commit()
    cur_data.execute('DELETE FROM NEW_affirmation WHERE user_id = ?', (int(0),))
    db_data.commit()


@dp.channel_post_handler(content_types=['photo'])
async def affirmation_mailing_photo(message: types.Message):
    await message.photo[-1].download(destination_file='affirmation.jpg')
    db_data = sqlite3.connect('Databases/Data_users.db')
    cur_data = db_data.cursor()
    users_affirmation = cur_data.execute(
        'SELECT user_id FROM NEW_affirmation WHERE agree = ?', ('y',)).fetchall()
    await asyncio.sleep(1)
    for user_miling in range(len(users_affirmation)):
        try:
            photo = open('affirmation.jpg', 'rb')
            await bot.send_photo(chat_id=(users_affirmation[user_miling][0]),
                                 photo=photo, parse_mode='html')
            await asyncio.sleep(0.1)
        except BotBlocked:
            cur_data.execute('UPDATE NEW_affirmation SET user_id = 0 WHERE user_id = ?',
                             (users_affirmation[user_miling][0],))
            db_data.commit()
    os.remove('affirmation.jpg')
    cur_data.execute('DELETE FROM NEW_affirmation WHERE user_id = ?', (int(0),))
    db_data.commit()


async def scheduler_sleep_message_wakeup():
    db_scheduler_sleep = sqlite3.connect('Databases/Current_habits.db')
    cur_scheduler = db_scheduler_sleep.cursor()
    cur_scheduler_check = db_scheduler_sleep.cursor()
    now = datetime.utcnow() + timedelta(hours=3, minutes=0)
    users_wakeup = cur_scheduler.execute(
        'SELECT user_id FROM sleep WHERE wakeup = ?', (now.strftime('%H:%M'),)).fetchall()
    for user_wakeup in range(len(users_wakeup)):
        print(users_wakeup[user_wakeup][0])
        if cur_scheduler_check.execute('SELECT active FROM sleep WHERE user_id = ?', (users_wakeup[user_wakeup][0],)).fetchone()[0] == str(1):
            try:
                await bot.send_message(chat_id=users_wakeup[user_wakeup][0], text='–ü–æ—Ä–∞ –≤—Å—Ç–∞–≤–∞—Ç—å! '
                                                                                  '\n–ù–∞—á–∏–Ω–∞—Ç—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ! –ê –≤—Å—ë –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π!')
                await asyncio.sleep(0.1)
            except BotBlocked:
                cur_scheduler.execute(
                    'UPDATE sleep SET user_id = 0 WHERE user_id = ?', (users_wakeup[user_wakeup][0],))
                db_scheduler_sleep.commit()
    cur_scheduler.execute('DELETE FROM sleep WHERE user_id = ?', (int(0),))
    db_scheduler_sleep.commit()


async def scheduler_sleep_message_bedtime():
    db_scheduler_sleep = sqlite3.connect('Databases/Current_habits.db')
    cur_scheduler = db_scheduler_sleep.cursor()
    cur_scheduler_check = db_scheduler_sleep.cursor()
    now = datetime.utcnow() + timedelta(hours=3, minutes=0)
    users_bedtime = cur_scheduler.execute(
        'SELECT user_id FROM sleep WHERE bedtime = ?', (now.strftime('%H:%M'),)).fetchall()
    for user_bedtime in range(len(users_bedtime)):
        if cur_scheduler_check.execute('SELECT active FROM sleep WHERE user_id = ?', (users_bedtime[user_bedtime][0],)).fetchone()[0] == str(1):
            try:
                await bot.send_message(chat_id=users_bedtime[user_bedtime][0],
                                       text='–í—ã –ø—Ä–æ—Å–∏–ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –≤–∞–º –ø–æ—Ä–∞ –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å!'
                                            '\n–ó–∞–≤—Ç—Ä–∞ –≤–∞—Å –∂–¥—ë—Ç –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! '
                                            '\n–ü–æ–º–Ω–∏—Ç–µ, –≤–µ–ª–∏–∫–æ–µ –Ω–∞—á–∏–Ω–µ—Ç—Å—è —Å –º–∞–ª–æ–≥–æ!')
                await asyncio.sleep(0.1)
            except BotBlocked:
                cur_scheduler.execute(
                    'UPDATE sleep SET user_id = 0 WHERE user_id = ?', (users_bedtime[user_bedtime][0],))
                db_scheduler_sleep.commit()
    cur_scheduler.execute('DELETE FROM sleep WHERE user_id = ?', (int(0),))
    db_scheduler_sleep.commit()


async def scheduler_water_message():
    db_scheduler_water = sqlite3.connect('Databases/Current_habits.db')
    cur_scheduler_water = db_scheduler_water.cursor()
    now = datetime.utcnow() + timedelta(hours=3, minutes=0)
    time_in_min_now = int(now.strftime('%H:%M').split(':')[0]) * 60 + int(now.strftime('%H:%M').split(':')[1])
    today = datetime.today()
    weekday = today.weekday()

    if weekday < 5:
        users = cur_scheduler_water.execute(
            'SELECT user_id FROM water WHERE interval != 0 AND schedule IN ("weekdays", "both")').fetchall()
    if weekday >= 5:
        users = cur_scheduler_water.execute(
            'SELECT user_id FROM water WHERE interval != 0 AND schedule IN ("weekends", "both")').fetchall()

    if time_in_min_now in range(600, 1381):
        for user in users:
            interval = cur_scheduler_water.execute(
                'SELECT interval FROM water WHERE user_id = ?', (user[0],)).fetchone()
            amount_of_portions = cur_scheduler_water.execute(
                'SELECT amountOfPortions FROM water WHERE user_id = ?', (user[0],)).fetchone()

            if time_in_min_now % interval[0] == 0:
                try:
                    await bot.send_message(chat_id=user[0], text='–ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É!'
                                                                 '\n–û–±—ä–µ–º –ø—Ä–∏—ë–º–∞ –≤–æ–¥—ã - ' + str(
                        round(2000 / amount_of_portions[0])) + ' –º–ª.')
                    await asyncio.sleep(0.1)
                except BotBlocked:
                    cur_scheduler_water.execute(
                        'UPDATE water SET user_id = 0 WHERE user_id = ?', (users[user[0]][0],))
                    db_scheduler_water.commit()
                cur_scheduler_water.execute('DELETE FROM water WHERE user_id = ?', (int(0),))
                db_scheduler_water.commit()
            if time_in_min_now == 1380:
                today = datetime.today()
                tableName = 'date_' + str(today)[0:10].replace('-', '')
                cur_scheduler_water.execute(f'ALTER TABLE waterDates ADD COLUMN {tableName} TEXT')
                await bot.send_message(chat_id=user[0], text='–ü–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ—Ä–º—É?',
                                       reply_markup=Markups.waterAnswers)


async def scheduler_sleep():
    schedule.every(1).minute.do(scheduler_sleep_message_wakeup)
    schedule.every(1).minute.do(scheduler_sleep_message_bedtime)
    now = datetime.utcnow() + timedelta(hours=3, minutes=0)
    time_in_min_now = int(now.strftime('%H:%M').split(':')[0]) * 60 + int(now.strftime('%H:%M').split(':')[1])
    if time_in_min_now >= 600 and time_in_min_now <= 1380:
        schedule.every(1).minute.do(scheduler_water_message)
    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)


async def log_users(message: types.Message):
    now = datetime.now()
    botlogfile = open('LogsBot', 'a')
    print(now.strftime('%d-%m-%Y %H:%M'), ' –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - ' + message.from_user.first_name,
          message.from_user.id, '–ù–∞–ø–∏—Å–∞–ª - ' + message.text, file=botlogfile)
    botlogfile.close()


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler_sleep())
    executor.start_polling(dp,
                           skip_updates=True,
                           on_startup=on_startup)
